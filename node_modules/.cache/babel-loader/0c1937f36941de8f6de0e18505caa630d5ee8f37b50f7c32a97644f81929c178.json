{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\igor\\\\Desktop\\\\online-shop\\\\client\\\\src\\\\components\\\\DeviceList.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { observer } from \"mobx-react-lite\";\nimport { Context } from \"../index\";\nimport { Row, Spinner } from \"react-bootstrap\";\nimport DeviceItem from \"./DeviceItem\";\nimport { getAllDevices } from \"../api/deviceApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeviceList = _s(observer(_c = _s(() => {\n  _s();\n  const {\n    device\n  } = useContext(Context);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    let brandId = device.selectedBrand.id | null;\n    let typeId = device.selectedType.id | null;\n    !brandId && !typeId ? getAllDevices().then(resp => device.setDevices(resp.rows)).finally(() => setLoading(false)) : getAllDevices(brandId ? brandId : null, typeId ? typeId : null).then(resp => device.setDevices(resp.rows)).finally(() => setLoading(false));\n  }, [device.selectedBrand, device.selectedType]);\n  return /*#__PURE__*/_jsxDEV(Row, {\n    className: 'mt-5',\n    children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 24\n    }, this) : device.devices.length === 0 ? /*#__PURE__*/_jsxDEV(Row, {\n      children: \"No items found :(\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }, this) : device.devices.map(device => /*#__PURE__*/_jsxDEV(DeviceItem, {\n      device: device\n    }, device.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 77\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}, \"r+GAbl167D8ThP/slwxA/G0z6Ek=\")), \"r+GAbl167D8ThP/slwxA/G0z6Ek=\");\n_c2 = DeviceList;\nexport default DeviceList;\nvar _c, _c2;\n$RefreshReg$(_c, \"DeviceList$observer\");\n$RefreshReg$(_c2, \"DeviceList\");","map":{"version":3,"names":["React","useContext","useEffect","useState","observer","Context","Row","Spinner","DeviceItem","getAllDevices","DeviceList","device","loading","setLoading","brandId","selectedBrand","id","typeId","selectedType","then","resp","setDevices","rows","finally","devices","length","map"],"sources":["C:/Users/igor/Desktop/online-shop/client/src/components/DeviceList.js"],"sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Context} from \"../index\";\r\nimport {Row, Spinner} from \"react-bootstrap\";\r\nimport DeviceItem from \"./DeviceItem\";\r\nimport {getAllDevices} from \"../api/deviceApi\";\r\n\r\n\r\nconst DeviceList = observer(() => {\r\n    const {device} = useContext(Context)\r\n    const [loading, setLoading] = useState(true)\r\n    useEffect(() => {\r\n        let brandId = device.selectedBrand.id | null;\r\n        let typeId = device.selectedType.id | null;\r\n\r\n        (!brandId && !typeId) ? getAllDevices().then(resp => device.setDevices(resp.rows)).finally(() => setLoading(false)) : getAllDevices(brandId?brandId:null, typeId?typeId:null).then(resp => device.setDevices(resp.rows)).finally(() => setLoading(false))\r\n    }, [device.selectedBrand, device.selectedType])\r\n    return (\r\n        <Row className={'mt-5'}>\r\n            {loading ? <Spinner/> : device.devices.length === 0 ?\r\n                <Row>No items found :(</Row> : device.devices.map(device => <DeviceItem key={device.id}\r\n                                                                                        device={device}/>)}\r\n        </Row>\r\n    );\r\n});\r\n\r\nexport default DeviceList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAC5D,SAAQC,QAAQ,QAAO,iBAAiB;AACxC,SAAQC,OAAO,QAAO,UAAU;AAChC,SAAQC,GAAG,EAAEC,OAAO,QAAO,iBAAiB;AAC5C,OAAOC,UAAU,MAAM,cAAc;AACrC,SAAQC,aAAa,QAAO,kBAAkB;AAAC;AAG/C,MAAMC,UAAU,MAAGN,QAAQ,SAAC,MAAM;EAAA;EAC9B,MAAM;IAACO;EAAM,CAAC,GAAGV,UAAU,CAACI,OAAO,CAAC;EACpC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5CD,SAAS,CAAC,MAAM;IACZ,IAAIY,OAAO,GAAGH,MAAM,CAACI,aAAa,CAACC,EAAE,GAAG,IAAI;IAC5C,IAAIC,MAAM,GAAGN,MAAM,CAACO,YAAY,CAACF,EAAE,GAAG,IAAI;IAEzC,CAACF,OAAO,IAAI,CAACG,MAAM,GAAIR,aAAa,EAAE,CAACU,IAAI,CAACC,IAAI,IAAIT,MAAM,CAACU,UAAU,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,MAAMV,UAAU,CAAC,KAAK,CAAC,CAAC,GAAGJ,aAAa,CAACK,OAAO,GAACA,OAAO,GAAC,IAAI,EAAEG,MAAM,GAACA,MAAM,GAAC,IAAI,CAAC,CAACE,IAAI,CAACC,IAAI,IAAIT,MAAM,CAACU,UAAU,CAACD,IAAI,CAACE,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,MAAMV,UAAU,CAAC,KAAK,CAAC,CAAC;EAC7P,CAAC,EAAE,CAACF,MAAM,CAACI,aAAa,EAAEJ,MAAM,CAACO,YAAY,CAAC,CAAC;EAC/C,oBACI,QAAC,GAAG;IAAC,SAAS,EAAE,MAAO;IAAA,UAClBN,OAAO,gBAAG,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAE,GAAGD,MAAM,CAACa,OAAO,CAACC,MAAM,KAAK,CAAC,gBAC/C,QAAC,GAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAwB,GAAGd,MAAM,CAACa,OAAO,CAACE,GAAG,CAACf,MAAM,iBAAI,QAAC,UAAU;MACC,MAAM,EAAEA;IAAO,GADVA,MAAM,CAACK,EAAE;MAAA;MAAA;MAAA;IAAA,QACG;EAAC;IAAA;IAAA;IAAA;EAAA,QAC5F;AAEd,CAAC,kCAAC;AAAC,MAhBGN,UAAU;AAkBhB,eAAeA,UAAU;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}